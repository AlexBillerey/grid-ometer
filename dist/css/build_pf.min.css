/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}header,section{display:block}h1{font-size:2em;margin:0}input{color:inherit;font:inherit;margin:0}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}html{color:#222;font-size:1em;line-height:1.4;-webkit-transition:all .2s linear 0s;transition:all .2s linear 0s}::-moz-selection{background:#b3d4fc;text-shadow:none}::selection{background:#b3d4fc;text-shadow:none}fieldset{border:0;margin:0;padding:0}header{padding:1em 1em 0}.no-js form{display:none}form{padding:0 1em 1em}output{background:#ff4500}input[type=range]{-webkit-appearance:none;width:100%;margin:1em 0}input[type=range]:focus{outline:none}input[type=range]::-webkit-slider-runnable-track{width:100%;height:30.6px;cursor:pointer;box-shadow:0 0 0 #020,0 0 0 #003c00;background:#fff;border-radius:1px;border:none}input[type=range]::-webkit-slider-thumb{box-shadow:0 0 0 #000,0 0 0 #0d0d0d;border:1px solid #656565;height:50px;width:50px;border-radius:50%;background:#fff;cursor:pointer;-webkit-appearance:none;margin-top:-10.8px}input[type=range]:focus::-webkit-slider-runnable-track{background:#fff}input[type=range]::-moz-range-track{width:100%;height:30.6px;cursor:pointer;box-shadow:0 0 0 #020,0 0 0 #003c00;background:#fff;border-radius:1px;border:none}input[type=range]::-moz-range-thumb{box-shadow:0 0 0 #000,0 0 0 #0d0d0d;border:1px solid #656565;height:50px;width:50px;border-radius:50%;background-image:radial-gradient(circle,#fff,hsla(0,0%,40%,.26));cursor:pointer;-webkit-transition:all .25s linear 0s;transition:all .25s linear 0s}input[type=range]:focus::-moz-range-thumb{background-image:radial-gradient(circle closest-side,#656565,#fff);-webkit-transition:all .25s linear 0s;transition:all .25s linear 0s}input[type=range]::-ms-track{width:100%;height:30.6px;cursor:pointer;background:transparent;border-color:transparent;color:transparent}input[type=range]::-ms-fill-lower{background:#f7f7f7;border:none;border-radius:2px;box-shadow:0 0 0 #020,0 0 0 #003c00}input[type=range]::-ms-fill-upper{background:#fff;border:none;border-radius:2px;box-shadow:0 0 0 #020,0 0 0 #003c00}input[type=range]::-ms-thumb{box-shadow:0 0 0 #000,0 0 0 #0d0d0d;border:1px solid #656565;height:50px;width:50px;border-radius:50%;background:#fff;cursor:pointer;height:30.6px}input[type=range]:focus::-ms-fill-lower,input[type=range]:focus::-ms-fill-upper{background:#fff}@media only screen and (min-width:768px){.wrapper{width:100%;margin:0 auto;box-sizing:border-box;max-width:960px;padding:0 1em 0 .5em;-webkit-transition:all .25s linear 0s;transition:all .25s linear 0s}.row{margin:1em 0 0;padding:0 1em;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between}.row:after{clear:both}[class^=col]{padding:.25em;-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;border:1px solid #000;border-top:0;background:pink}.row,.wrapper,[class^=col]{box-sizing:border-box}.col_span_1_of_12{-webkit-flex-basis:5.8507%;-ms-flex-preferred-size:5.8507%;flex-basis:5.8507%}.col_span_2_of_12{-webkit-flex-basis:14.4097%;-ms-flex-preferred-size:14.4097%;flex-basis:14.4097%}.col_span_3_of_12{-webkit-flex-basis:22.9688%;-ms-flex-preferred-size:22.9688%;flex-basis:22.9688%}.col_span_4_of_12{-webkit-flex-basis:31.5278%;-ms-flex-preferred-size:31.5278%;flex-basis:31.5278%}.col_span_5_of_12{-webkit-flex-basis:40.0868%;-ms-flex-preferred-size:40.0868%;flex-basis:40.0868%}.col_span_6_of_12{-webkit-flex-basis:48.6458%;-ms-flex-preferred-size:48.6458%;flex-basis:48.6458%}.col_span_7_of_12{-webkit-flex-basis:57.2049%;-ms-flex-preferred-size:57.2049%;flex-basis:57.2049%}.col_span_8_of_12{-webkit-flex-basis:65.7639%;-ms-flex-preferred-size:65.7639%;flex-basis:65.7639%}.col_span_9_of_12{-webkit-flex-basis:74.3229%;-ms-flex-preferred-size:74.3229%;flex-basis:74.3229%}.col_span_10_of_12{-webkit-flex-basis:82.8819%;-ms-flex-preferred-size:82.8819%;flex-basis:82.8819%}.col_span_11_of_12{-webkit-flex-basis:91.4410%;-ms-flex-preferred-size:91.4410%;flex-basis:91.4410%}.col_span_12_of_12{-webkit-flex-basis:100.0000%;-ms-flex-preferred-size:100.0000%;flex-basis:100.0000%}}@media only screen and (min-width:961px){.wrapper{padding:0}}@media print{*,:after,:before{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}p{orphans:3;widows:3}}
/*# sourceMappingURL=data:application/json;base64, */